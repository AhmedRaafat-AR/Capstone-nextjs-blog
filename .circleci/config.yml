version: 2.1

commands:
  destroy-environment:
    description: Destroy ec2 cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "nextjs-backend"


jobs:
  build:
    docker:
      - image: node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-deps-{{ checksum "yarn.lock" }}
            - v2-deps-
      - run:
          name: install dependencies and build
          command: |
            yarn set version latest
            yarn install
            yarn run build                 
      - save_cache:
          key: v2-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
 
  test:
    docker:
      - image: node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-deps-{{ checksum "yarn.lock" }}
            - v2-deps-
      - run:
          name: test build
          command: |
            yarn set version latest
            yarn run test
            
  scan:
    docker:
      - image: node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-deps-{{ checksum "yarn.lock" }}
            - v2-deps-
      - run:
          name: check audit level
          command: |
            yarn set version latest
            yarn audit --audit-level=critical

  lint-docker-file:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Lint Dokcerfile
          command: |
            apk update && apk add make
            make install
            make lint          
         
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure EC2 exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags name=nextjs \
              --stack-name "nextjs-backend" \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Add EC2 ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=Nextjs" --output text >> inventory.txt
            cp inventory.txt ~/
            cat ~/inventory.txt  
      - run:
          name: create memstash for EC2 dns-name
          command: |
            ec2url=`aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:Name,Values=Nextjs" --output text`

            curl -H "Content-Type: text/plain" \
              -H "token: 9de9bfa8-b369-4852-b998-a98dd8377daa" \
              --request PUT --data "$ec2url" https://api.memstash.io/values/dnsname   
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: contentwisetv/ansible-aws
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:63:7e:a5:10:d3:0b:34:02:fd:bc:29:4f:7a:01:73"]
      - run:
          name: Install dependencies
          command: |
            apk --update add tar gzip
      - attach_workspace:
          at: ~/            
      - run:
          name: Configure server
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
          command: |
            cd .circleci/ansible 
            ansible-playbook configure-server.yml -i ~/inventory.txt
      - destroy-environment

  deploy-nextjs-app:
    docker:
      - image: python:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:63:7e:a5:10:d3:0b:34:02:fd:bc:29:4f:7a:01:73"]
      - attach_workspace:
          at: ~/        
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install ansible
            ansible --help
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: copy package.json yarn.lock
          command: |
           tar -czf config.tar.gz Dockerfile package.json yarn.lock pages/ public/ 
           cp config.tar.gz ~/project/.circleci/ansible/roles/deploy/files/              
      - run:
          name: ssh to ec2 for deploy
          command: |
            cd .circleci/ansible 
            ansible-playbook deploy-backend.yml -i ~/inventory.txt
      - destroy-environment                  
                           
  smoke-test:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt -y install curl perl apt-utils unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install            
      - run:
          name: verify existing nextjs blue app.
          command: |
            ec2url=`curl -H "token: 9de9bfa8-b369-4852-b998-a98dd8377daa" \
             --request GET https://api.memstash.io/values/dnsname`

            if curl -s ${ec2url}:32321 | grep -o "Next.js! - Blue"
            then
              echo "Next.js! - Blue"
            fi               
      - run:
          name: nextjs green app smoke test.
          command: |
            ec2url=`curl -H "token: 9de9bfa8-b369-4852-b998-a98dd8377daa" \
             --request GET https://api.memstash.io/values/dnsname`

            if curl -s ${ec2url}:3030 | grep -o "Next.js! - Green"
            then
              echo "Next.js! - Green"
            fi                
      - destroy-environment

  update-deployment-image:
    docker:
      - image: python:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:63:7e:a5:10:d3:0b:34:02:fd:bc:29:4f:7a:01:73"]
      - attach_workspace:
          at: ~/        
      - run:
          name: Install dependencies
          command: |
            python3 -m pip install ansible
            ansible --help
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install 
      - run:
          name: ssh to ec2 for update deployment image to green app image
          command: |
            cd .circleci/ansible 
            ansible-playbook update-image.yml -i ~/inventory.txt
      - destroy-environment


workflows:
  default:
    jobs:
      - build
      #- test:
      #    requires: [build]
      #- scan:
      #    requires: [test]
      #- lint-docker-file:
      #    requires: [scan]              
      #- deploy-infrastructure:
      #    requires: [lint-docker-file]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- deploy-nextjs-app:
      #    requires: [configure-infrastructure]
      #- smoke-test:
      #    requires: [deploy-nextjs-app]
      #- update-deployment-image:
      #    requires: [smoke-test]                                                              