version: 2.1

commands:
  destroy-environment:
    description: Destroy ec2 cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "nextjs-backend"


jobs:
  build:
    docker:
      - image: node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-deps-{{ checksum "yarn.lock" }}
            - v2-deps-
      - run:
          name: install dependencies and build
          command: |
            yarn set version latest
            yarn install
            yarn run build                 
      - save_cache:
          key: v2-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
 
  test:
    docker:
      - image: node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-deps-{{ checksum "yarn.lock" }}
            - v2-deps-
      - run:
          name: test build
          command: |
            yarn set version latest
            yarn run test
            
  scan:
    docker:
      - image: node:14.15.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-deps-{{ checksum "yarn.lock" }}
            - v2-deps-
      - run:
          name: check audit level
          command: |
            yarn set version latest
            yarn audit --audit-level=critical

  lint-docker-file:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Lint Dokcerfile
          command: |
            apk update && apk add make
            make install
            make lint          

  build-push-docker-image:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update 
            apt install curl perl apt-utils unzip docker.io -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install       
      - run:
          name: Build and Push Docker Nextjs-green Image to a Aws Repo 
          command: |
            newgrp root docker
            chmod +x build_push_docker.sh
            ./build_push_docker.sh
      - run:
          name: Create Docker Container
          command: |
            docker run -d -p 3030:3000 public.ecr.aws/y5l2b5h6/nextjs:green
      - run:
          name: Test Nextjs:Green App
          command: | 
            URL="localhost:3030"            

            if curl -s ${URL} | grep "Green"
            then
              echo "Successful"
            fi            
         
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure EC2 exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags name=nextjs \
              --stack-name "nextjs-backend"
      - run:
          name: Add EC2 ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=Nextjs" --output text >> inventory.txt
            cp inventory.txt ~/
            cat ~/inventory.txt  
      - run:
          name: create memstash for EC2 dns-name
          command: |
            ec2url=`aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:Name,Values=Nextjs" --output text`

            curl -H "Content-Type: text/plain" \
              -H "token: 0f745c33-38cb-4caa-bcfe-4e221d570a3a" \
              --request PUT --data "$ec2url" https://api.memstash.io/values/backend-dnsname-${CIRCLE_WORKFLOW_ID}   
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: contentwisetv/ansible-aws
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:63:7e:a5:10:d3:0b:34:02:fd:bc:29:4f:7a:01:73"]
      - run:
          name: Install dependencies
          command: |
            apk --update add tar gzip
      - attach_workspace:
          at: ~/            
      - run:
          name: Configure server
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
          command: |
            cd .circleci/ansible 
            ansible-playbook configure-server.yml -i ~/inventory.txt
      - destroy-environment

  deploy-nextjs-app:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:63:7e:a5:10:d3:0b:34:02:fd:bc:29:4f:7a:01:73"]
      - attach_workspace:
          at: ~/        
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install -yy less python3 docker.io
            curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
            python3 get-pip.py
            python3 -m pip install ansible
            ansible --help
            docker --version
                           

workflows:
  default:
    jobs:
      - build
      - test:
          requires: [build]
      - scan:
          requires: [test]
      - lint-docker-file:
          requires: [scan]
      - build-push-docker-image:
          requires: [lint-docker-file]                    
      #- deploy-infrastructure:
      #    requires: [build-push-docker-image]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- deploy-nextjs-app:
      #    requires: [configure-infrastructure]                                